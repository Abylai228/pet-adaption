
Class Pet static class Pet { A static nested class that represents each pet.

"Contains attributes: id, name, type, and age."

private int id; private String name; private String type; private int age;

"Private fields: follows encapsulation by hiding internal data."

public Pet(int id, String name, String type, int age) { this.id = id; this.name = name; this.type = type; this.age = age; } "Constructor to initialize pet attributes."

public int getId() { return id; } public void setName(String name) { this.name = name; } public void setType(String type) { this.type = type; } public void setAge(int age) { this.age = age; }

public String toString() { return "Pet ID: " + id + ", Name: " + name + ", Type: " + type + ", Age: " + age; } Overrides toString() to nicely print pet info.

"🛠️ Class PetAdoptionManager"

static class PetAdoptionManager {

"Main controller for managing pets and user interaction."

private Map<Integer, Pet> pets = new HashMap<>(); Uses a HashMap to store pets by their id for fast lookup and removal.

private int nextId = 1; "Tracks the next available ID to assign to new pets."

private Scanner scanner = new Scanner(System.in); "Used to read user input from the console."

🔁 start() Method – Main Menu Loop

public void start() { while (true) { "Infinite loop until the user chooses to exit."

System.out.println("\n🐾 Pet Adoption System"); "Prints menu with options."

int option; try { option = Integer.parseInt(scanner.nextLine()); } catch (Exception e) { System.out.println("Invalid input. Try again."); continue; } Reads the user’s choice and handles non-integer input.

"Menu" switch (option) { case 1 -> addPet(); case 2 -> updatePet(); case 3 -> removePet(); case 4 -> listPets(); case 5 -> { System.out.println("Exiting... Goodbye! 🐶🐱"); return; } default -> System.out.println("Invalid option, try again."); } Based on user input, calls the appropriate method.

➕ addPet()

String name = scanner.nextLine(); String type = scanner.nextLine(); int age = Integer.parseInt(scanner.nextLine()); Gets new pet info from the user.

"Creates a new Pet and stores it in the map." Pet pet = new Pet(nextId++, name, type, age); pets.put(pet.getId(), pet);

✏️ updatePet()

int id = Integer.parseInt(scanner.nextLine()); Pet pet = pets.get(id); Finds the pet by ID.

"Updates the pet only if the user entered a new value." if (!name.isEmpty()) pet.setName(name);

❌ removePet()

int id = Integer.parseInt(scanner.nextLine()); if (pets.remove(id) != null) { System.out.println("✅ Pet removed successfully."); } Removes a pet by ID, checks if removal was successful.

📃 listPets()

if (pets.isEmpty()) { System.out.println("No pets available for adoption."); } for (Pet pet : pets.values()) { System.out.println(pet); } Lists all pets currently in the system.

That was a quite difficult task to do because of restoring information and updating for the rest i could use if conditions 

